import { z } from 'zod';

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! DIRECTORY RESPONSE
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

const individualFile = z.object({
  type: z.literal('file').or(z.literal('dir')),
  size: z.number(),
  name: z.string(),
  path: z.string(),
  sha: z.string(),
  git_url: z.string(),
  download_url: z.string(),
  _links: z.object({
    self: z.string(),
    git: z.string(),
    html: z.string(),
  }),
})

const directoryResponse = individualFile.omit({type: true}).extend({
  type: z.literal('dir'),
  entries: z.array(individualFile)
})

/* https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28 */
export type DirectoryResponse = z.infer<typeof directoryResponse>
export const directoryResponseSchema = directoryResponse

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! FILE RESPONSE
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

const fileResponse = z.object({
  type: z.literal('file'),
  size: z.number(),
  name: z.string(),
  path: z.string(),
  content: z.string(),
  encoding: z.string(),
  sha: z.string(),
  url: z.string(),
  git_url: z.string(),
  html_url: z.string(),
  download_url: z.string(),
  _links: z.object({
    git: z.string(),
    self: z.string(),
    html: z.string(),
  })
})

export type FileResponse = z.infer<typeof fileResponse>
export const fileResponseSchema = fileResponse
import { type Blob } from "buffer";
import { type Result } from "../result";
import { File, type Directory } from "./types";

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! TYPE DEFINITIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


/* https://docs.github.com/en/rest/git/trees?apiVersion=2022-11-28#get-a-tree */
interface TreeResponseItem {
    path: string,
    mode: string,
    type: string,
    size: number,
    sha: string,
    url: string
}

export interface TreeResponse {
    sha: string,
    url: string,
    tree: TreeResponseItem[]
}

////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
//! MAIN FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


export async function getRootLevelFiles(repository: string, branch: string | null = null): Promise<Result<string[], string>> {
    
}

export async function getFilesFromDirectory(directory: Directory, repository: string, branch: string | null = null): Promise<Result<TreeResponse, string>> {

}

export async function readFile(file: File, repository: string, branch: string | null = null): Promise<Result<Blob, string>> {

}